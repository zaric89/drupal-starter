<?php

/**
 * Implements HOOK_views_pre_render
 *
 * @param \Drupal\views\ViewExecutable $view
 */
function drupal_starter_views_pre_render(\Drupal\views\ViewExecutable $view) {
    if ($view->id() == 'frontpage' && $view->current_display == 'page_1') {
        $view->empty = [];

        $view->setTitle('');
    }
}

/**
 * Implements hook_preprocess_HOOK() for HTML document templates.
 *
 */
function drupal_starter_preprocess_html(&$variables) {
    // Page specific info
    $variables['path_info']['args'] = FALSE;
    $path = \Drupal::service('path.current')->getPath();
    $path = ltrim($path, '/');
    $path_args = explode('/', $path);

    if (isset($path_args[0]) && isset($path_args[1]) && ($path_args[0] == 'node') && (is_numeric($path_args[1]))) {
        $variables['attributes']['class'][] = 'page-node-' . $path_args[1];
        $variables['attributes']['class'][] = 'page-node-' . $variables['node_type'];
    }
    elseif (isset($path_args[0]) && isset($path_args[1]) && ($path_args[0] == 'user')) {
        $variables['attributes']['class'][] = 'page-user-' . $path_args[1];
    }
    elseif ($path_args[0] == 'taxonomy' && is_numeric($path_args[2])) {
        $term = \Drupal::entityTypeManager()
            ->getStorage('taxonomy_term')
            ->load($path_args[2]);

        $variables['attributes']['class'][] = 'page-taxonomy-' . $term->getVocabularyId();
    }
    elseif (isset($path_args[0]) && !isset($path_args[1])) {
        $variables['attributes']['class'][] = 'page-' . $path_args[0];
    }
    else {
        $variables['attributes']['class'][] = 'page-' . $path_args[0] . ' page-' . $path_args[1];
    }

    // You can change theme color here by changing content attribute
    $variables['page']['#attached']['html_head'][] = [
        [
            '#type' => 'html_tag',
            '#tag' => 'meta',
            '#attributes' => [
                'content' => '#46588a',
                'name' => 'theme-color'
            ],
        ],
        'theme-color'
    ];

    // You can change navbutton color here by changing content attribute
    $variables['page']['#attached']['html_head'][] = [
        [
            '#type' => 'html_tag',
            '#tag' => 'meta',
            '#attributes' => [
                'content' => '#46588a',
                'name' => 'msapplication-navbutton-color'
            ],
        ],
        'msapplication-navbutton-color'
    ];

    $variables['page']['#attached']['html_head'][] = [
        [
            '#type' => 'html_tag',
            '#tag' => 'meta',
            '#attributes' => [
                'content' => 'yes',
                'name' => 'apple-mobile-web-app-capable'
            ],
        ],
        'apple-mobile-web-app-capable'
    ];

    $variables['page']['#attached']['html_head'][] = [
        [
            '#type' => 'html_tag',
            '#tag' => 'meta',
            '#attributes' => [
                'content' => 'black-translucent',
                'name' => 'apple-mobile-web-app-status-bar-style'
            ],
        ],
        'apple-mobile-web-app-status-bar-style'
    ];

    // SEO Information
    $http_equiv = array(
        '#type' => 'html_tag',
        '#tag' => 'meta',
        '#attributes' => array(
            'http-equiv' => 'x-ua-compatible',
            'content' => 'ie=edge',
        ),
    );
    $variables['page']['#attached']['html_head'][] = [
        $http_equiv,
        'http-equiv'
    ];
}

/**
 * Implements of HOOK_page_attachments_alter
 *
 * @param $page
 */
function drupal_starter_page_attachments_alter(&$page) {
    $viewport = array(
        '#type' => 'html_tag',
        '#tag' => 'meta',
        '#attributes' => array(
            'name' => 'viewport',
            'content' => 'width=device-width, initial-scale=1, shrink-to-fit=no',
        ),
    );

    $page['#attached']['html_head'][] = [$viewport, 'viewport'];

    $format_detection = array(
        '#type' => 'html_tag',
        '#tag' => 'meta',
        '#attributes' => array(
            'name' => 'format-detection',
            'content' => 'telephone=no',
        ),
    );

    $page['#attached']['html_head'][] = [$format_detection, 'format-detection'];
}

/**
 * Implements hook_preprocess_HOOK() for page templates.
 */
function drupal_starter_preprocess_page(&$variables) {

    $type = (isset($variables['node']) && $variables['node'] instanceof \Drupal\node\Entity\Node) ? $variables['node']->getType() : '';
    $width = _drupal_starter_content_width(!empty($variables['page']['sidebar_first']), !empty($variables['page']['sidebar_second']), $type);
    $content_width = 'col-lg-' . $width;

    $sidebar_first_width = 'col-lg-3';
    $sidebar_second_width = 'col-lg-3';

    $variables['content_attributes'] = [
        'class' => [
            'main-content',
            'layout-content',
            $content_width,
        ],
        'id' => ['content'],
        'role' => ['main'],
    ];

    $variables['sidebar_first_width'] = $sidebar_first_width;
    $variables['sidebar_second_width'] = $sidebar_second_width;
}

function drupal_starter_theme_suggestions_page_alter(array &$suggestions, array $variables) {
    // Add content type suggestions.
    if ($node = \Drupal::request()->attributes->get('node')) {
        array_splice($suggestions, 1, 0, 'page__node__' . $node->getType());
        array_splice($suggestions, 1, 0, 'page__node__' . $node->id());
    }

    // Add taxonomy VID suggestions.
    if (\Drupal::routeMatch()
            ->getRouteName() == 'entity.taxonomy_term.canonical' && $tid = \Drupal::routeMatch()
            ->getRawParameter('taxonomy_term')) {
        $term = \Drupal::entityTypeManager()
            ->getStorage('taxonomy_term')
            ->load($tid);

        $suggestions[] = 'page__taxonomy__' . $term->getVocabularyId();
    }

    // Use page--user--login.html.twig template for login, forgot password and register page
    if (in_array('page__user__password', $suggestions)) {
        $suggestions[] = 'page__user__login';
    }

    // 403 and 404 page suggestions.
    if (!is_null(Drupal::requestStack()->getCurrentRequest()->attributes->get('exception'))) {
        $status_code = Drupal::requestStack()->getCurrentRequest()->attributes->get('exception')->getStatusCode();
        switch ($status_code) {
            case 403:
            case 404: {
                $suggestions[] = 'page__' . (string) $status_code;
                break;
            }
            default:
                break;
        }
    }
}

/**
 * Implements hook_preprocess_HOOK() for page templates.
 */
function drupal_starter_preprocess_page_title(&$variables) {
    // Since the title and the shortcut link are both block level elements,
    // positioning them next to each other is much simpler with a wrapper div.
    if (!empty($variables['title_suffix']['add_or_remove_shortcut']) && $variables['title']) {
        // Add a wrapper div using the title_prefix and title_suffix render
        // elements.
        $variables['title_prefix']['shortcut_wrapper'] = array(
            '#markup' => '<div class="shortcut-wrapper clearfix">',
            '#weight' => 100,
        );
        $variables['title_suffix']['shortcut_wrapper'] = array(
            '#markup' => '</div>',
            '#weight' => -99,
        );
        // Make sure the shortcut link is the first item in title_suffix.
        $variables['title_suffix']['add_or_remove_shortcut']['#weight'] = -100;
    }
}
/**
 * Implements hook_form_alter().
 */
function drupal_starter_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {

    if ($form_id == 'user_login_form') {
        $url = \Drupal\Core\Url::fromRoute('user.pass');

        $link_options = [
            'attributes' => [
                'class' => [
                    's-login-reset-pass',
                ],
            ],
        ];
        $url->setOptions($link_options);

        $form['name']['#attributes']['placeholder'] = t('Email address');
        $form['name']['#title'] = '';
        $form['name']['#description'] = '';
        $form['pass']['#title'] = '';
        $form['pass']['#description'] = '';
        $form['pass']['#attributes']['placeholder'] = t('Password');

        $form['actions']['reset_password']['#markup'] = \Drupal\Core\Link::fromTextAndUrl(
            t('Forgot Password'),
            $url
        )->toString();
    }

    if ($form_id == 'user_pass') {
        $form['name']['#title'] = '';
        $form['name']['#attributes']['placeholder'] = t('Username or email address');
    }
}

/**
 * Implements hook_preprocess_field()
 *
 * @param $variables
 * @param $hook
 */
function drupal_starter_preprocess_field(&$variables, $hook) {
    $element = $variables['element'];

    $variables['attributes']['class'][] = 'field-' . $element['#field_name'];
}

/**
 * Implements hook_preprocess_HOOK() for block.html.twig.
 */
function drupal_starter_preprocess_block(&$variables) {
    // Add a clearfix class to system branding blocks.
    if ($variables['plugin_id'] == 'system_branding_block') {
        $variables['attributes']['class'][] = 'clearfix';
    }
}

/**
 * Returns width of content region.
 *
 * Calculates content width based on first and second column width parameters.
 */
function _drupal_starter_content_width($first = 0, $second = 0) {
    $sidebar_first_width = ($first) ? 3 : 0;
    $sidebar_second_width = ($second) ? 3 : 0;
    $content_width = 12 - $sidebar_first_width - $sidebar_second_width;

    return $content_width;
}
