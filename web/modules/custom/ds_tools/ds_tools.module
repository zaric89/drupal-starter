<?php

/**
 * @file
 * DS Tools module.
 */

/**
 * Implements hook_cron().
 */
function ds_tools_cron() {
  $now = \Drupal::time()->getCurrentTime();
  $last_cron = \Drupal::config('ds_tools.settings')->get('time');

  if ($last_cron != date('dMY', $now)) {
    wd_print('settings_debug', $last_cron);

    \Drupal::service('config.factory')
      ->getEditable('ds_tools.settings')
      ->set('time', date('dMY', $now))
      ->save();
  }
}

/**
 * Debugging helper, print in watchdog()
 *
 * @param string $name
 *   Machine name type.
 * @param mixed $var
 *   Variable content to be printed.
 */
function wd_print($name, $var) {
  \Drupal::logger($name)->debug('<pre>' . print_r($var, TRUE) . '</pre>');
}

/**
 * Returns a component of the current Drupal path.
 *
 * When viewing a page at the path "admin/structure/types", for example, arg(0)
 * returns "admin", arg(1) returns "structure", and arg(2) returns "types".
 *
 * Avoid use of this function where possible, as resulting code is hard to
 * read. In menu callback functions, attempt to use named arguments. See the
 * explanation in menu.inc for how to construct callbacks that take arguments.
 * When attempting to use this function to load an element from the current
 * path, e.g. loading the node on a node page, use menu_get_object() instead.
 *
 * @param int $index
 *   The index of the component, where each component is separated by a '/'
 *   (forward-slash), and where the first component has an index of 0 (zero).
 * @param string $path
 *   A path to break into components. Defaults to the path of the current page.
 *
 * @return string
 *   The component specified by $index, or NULL if the specified component was
 *   not found. If called without arguments, it returns an array containing all
 *   the components of the current path.
 */
function arg($index = NULL, $path = NULL) {
  // Even though $arguments doesn't need to be resettable for any functional
  // reasons (the result of explode() does not depend on any run-time
  // information), it should be resettable anyway in case a module needs to
  // free up the memory used by it.
  // Use the advanced drupal_static() pattern, since this is called very often.
  static $drupal_static_fast;
  if (!isset($drupal_static_fast)) {
    $drupal_static_fast['arguments'] = &drupal_static(__FUNCTION__);
  }
  $arguments = &$drupal_static_fast['arguments'];

  if (!isset($path)) {
    $character_mask = '/';
    $path = ltrim(\Drupal::service('path.current')->getPath(), $character_mask);
  }
  if (!isset($arguments[$path])) {
    $arguments[$path] = explode('/', $path);
  }
  if (!isset($index)) {
    return $arguments[$path];
  }
  if (isset($arguments[$path][$index])) {
    return $arguments[$path][$index];
  }
}
